Переменные - это нечто,что может,НО не обязано изменяться.
Константа - это нечто,что не может изменяться,является постоянным.

let - перемення (в старых версиях var)
const - константа

Использовать ключевые слова let/const нужно только в момент создания переменной.
НАПРИМЕР: let age;//создали переменную,а дальше просто используем age;  => age + 5;

      Тип NUMBER:
  - Целые числа
  - Десятичные
  - NaN - Not a Number,является ошибкой вычисления
  - Infinity - значение бесконечности

       Тип BigInt:
   - Большие числа (реально боооольшие) - Максимальное число (+-)
 
       Тип String:
  let myNameIs = 'Bond'; - то,что в кавычках является строкой.
  Значение строки указывается в кавычках let name = '1ame.nonam3';
                                                       СТРОКА ^
                                                              |
  Если в имени есть цифра,но она В КАВЫЧКАХ,значит - ЭТО СТРОКА!

        Тип Boolean:
  Значение NULL (let nothing = null;) - этот тип обозначает пустое значение,или когда значение неизвестно.
   !!! NULL НЕ РАВНЯЕТСЯ НУЛЮ!!!
   Тоесть null обозначает не ноль,а то,что неизвестно,что находится в (чём-либо).

       Тип Undefined:
   Это значение устанавливается,когда переменная была объявлена,но значение не было установлено.
   let noValue;
   let noValue = undefined;

                 Разница между NULL и UNDEFINED:
       NULL                                  UNDEFINED
  Это ЗНАЧЕНИЕ!                            Обозначает то,что у 
  Когда оно записывается в переменную,     переменной НЕТ значения.
  то она ИМЕЕТ ЗНАЧЕНИЕ!
  И это значение - NULL.  

        Тип Object:
   Этот тип является представление любого предмета из реальности в компьютерной форме.
   По сути - это большой контейнер,который может содержать в себе все типы (предыдущие),
   а так-же внутренние объекты (objects).
НАПРИМЕР:Берём монитор (реальный обьект) и создаём простой обьект вот такой записью:

    let monitor = {
               name:'SAMTRON',
               weight:3.3,
               resolution:27,
               price:1000,
               rotate:false
      };

   В фигурных скобках перечисляум свойства монитора,это можно считать вложенной переменной,где имя переменной weight,двоеточие и значение переменной 3.3 .Так можно перечислять,пока не надоест.
   После значения нужно ставить запятую только тогда,когда после этого идёт ещё одно свойство.

        Тип Symbol:
   Этот тип служит для создания уникальных значений.

   let unique = newSymbol();

                         МАССИВЫ:

    Массивы могут быть - одномерные
                       - двумерные 
                       - трёхмерные и т.д.

    ОДНОМЕРНЫЙ МАССИВ:
  Массив создаётся при помощи квадратных скобок [val1,val2,'val3',...] и т.д.
  Одномерный массив выглядит как строка со значениями,где под каждое значение выделена своя ячейка.Для доступа к ячейке внутри массива,нужно использовать так-же [],в которых нужно указать номер ячейки,которую мы хотим вытянуть. arr[0] - этот номер называется ИНДЕКС.

  !! В JavaScript нумерация ячеек начинается с нуля,а не с единицы !!

    ДВУМЕРНЫЙ МАССИВ:
  Массив создаётся внутри массива и обозначается [[ ]] ,тоесть,например,мы запихиваем два массива в один:

  arr = [['one','two','three','four'],['five','six']];
  > (2) [Array(4),Array(2)]
    0:Array(4)
     0:"one"
     1:"two"
     2:"three"
     3:"four"
   Lenght:4
    1:Array(2)
     0:"five"
     1:"six"
   Lenght:2
                Обращение к индексу вложенного массива:
                                                   arr[0][0]4
                                                   "ONE"
                Вторые скобки с индексом выполняются под результатом первых скобок (sub-array[0])

     ТРЁХМЕРНЫЙ МАССИВ:
  
  arr = [[['one','two','three'],['four','five']],[['six','seven'],['eight','nine']]]


                     ОПЕРАТОРЫ:

   - Унарные - используются с одним значением
   - Бинарные - используются с двумя значениями
 Операторы с двумя значениями - с ними можно использовать как напрямую числа,так и переменные.

 => Оператор +  используется,чтобы сложить два числа.
 => Оператор -  используется,чтобы вычесть одно число из другого.
 => Оператор *  используется,чтобы умножить одно число на другое.
 => Оператор /  используется,чтобы разделить одно число на другое.
 => Оператор ** используется,чтобы возвести число в степень.
 => Оператор %  используется,чтобы получить остаток от деления.

    Приоритет операторов - Как и в школьной программе,приоритет операторов отвечает за то,какое действие должно выполняться ранее.
  НАПРИМЕР: сначала умножить,потом сложить:
            >1 + 2 * 3
            <7
            сначала то,что в скобках,потом всё остальное:
            >(1 + 2)* 3
            <9

    ОПЕРАТОРЫ С ОДНИМ ЗНАЧЕНИЕМ:
  Оператор + (+a;) - этот плюс используется не для сложения чисел,а для конвертации в число.Если после этого плюса будет не цифровое значение,то он будет пытаться преобразовать его в число.
   > +5;   > +true;   > +false;
   >5      <1         <0

  Оператор - (-a;) - используется для того,чтобы сделать число отрицательным,но при этом не обновляет значение в самой переменной.
   > -3;   >a = 5;   > -a;   >a;
   < -3    <5        <-5     <5
 
  Оператор ++ (инкремента) - этот оператор используется с переменными и не может использоваться просто со значениями.Так-же у него есть две формы:
   ++ ДО переменной
   ПОСЛЕ переменной ++
  
  Инкремент ДО переменной (Префиксный инкремент) - ++a;
     Этот оператор делает увеличение значения на единицу,и сразу возвращает результат (при этом значение      изменяется и в переменной).
  > ++a;
  <6
  >a;
  <6

  Инкремент ПОСЛЕ переменной (Постфиксный инкремент) - a++;
  >a = 5;
  <5
  >a++;
  <5
  >a;
  <6

  Оператор -- (декремента) - этот оператор делает уменьшение значения на единицу.
     --a;    a--;

   >a = 5;
   <5
   >--a;
   <4
   >a--;
   <4
   >a;
   <3

   Бинарный + используется так-же и со строками:
  >'Бро' + 'Ты' + 'Про!';
  <"Бро Ты Про!"

  >'Под' + 'Пишись';
  <"ПодПишись"

  При сложении числа и строки или наоборот,так как одно из значений - строка,то второе тоже становится строкой,и строки объединяются.
  >1 + '1';
  <"11"       Мы получили не число 11, а строку с двумя единицами!!

  Если значение больше двух,то они выполняются в порядке приоритета:
  >1 + 1 +'1';
  <"21"           Строка 1 + 1 объединяется со строкой '1' и получаем две строки "21" (НЕ число 21!!)

  Остальные операторы,встречая строку пытаются её преобразовать к числу:
  >'10'/5          >'5'*2
  <2               <10
  
   Оператор > (больше) - используется,чтобы проверить,больше ли одно значение,чем другое.
  Сравниваем цифры =>  > 5>2
                       <true
                       > 10>1
                       <true
                       > 3>9
                       >false
 Сравниваем строки => в таблице кодов указаны значения равные символу или букве,поэтому при сравнении строк,сравниваются коды.
  НАПРИМЕР: >'xyi' > 'abc';         x=120
            <true             где,  y=121         120>97
                                    i=105         121>98
                                    a=97          105>99
                                    b=98      (см.таблицу онлайн)
                                    c=99
  Значение > так-же пытается преобразить строку к числу:
   >'10'>1;     >10>'5';
   <true        <true

   Оператор < (меньше) - используется,чтобы проверить меньше ли одно значение,чем другое.(Работают все те же правила,что и при проверке на больше).

   Оператор >= (больше либо равно) - Проверяет,больше ли одно значение,чем другое,либо они равны.
  >10>=10;    >5>=10;
  <true       <false

   Оператор <= (меньше либо равно) - Проверяет,меньше ли одно значение,чем другое,либо они равны.
  >10<=10;      >9<=10;     >15<=10;
  <true         <true       <false
 
   Оператор == (равенства) - проверяет,равны ли значения.При сравнении разных типов,он преобразует всё в числа.При сравнении строк так-же сравниваются коды символов.
   >'2'==2;    >2==2;     >true==1;
   <true       <true      <true
   >5=='5';    >10==15;   >0==false;
   <true       <false     <true

              >'string'=='string';
              <true

    Оператор строгого равенства = = =  - тоже оператор сравнения,но в отличии от = =,он ещё проверяет тип - тоесть теперь не получится сравнить число и строку, так как у них разные типы.При сравнении строк снова сравниваются коды.
  >'2'===2;      >2===2;        >'string'==='string';
  <false         <true          <true
  >true===1;     >5===6;
  <false         <false

   Оператор += (сокращённые присваивания) - используется,когда нужно изменить значения в переменной.
  >a=5;        >a=5;       Увеличили переменную на 5 (5+5)
  <5           <5
  >a=a+5;      >a+=5;
  <10          <10
  >a;          >a;
  <10          <10

   Такие сокращения есть на все математические операторы ( +, -, *, и тд), и целые выражения.
                                                                             >a+=10+2*3/2;
                                                                             <13

   Оператор != или !== (не равно).